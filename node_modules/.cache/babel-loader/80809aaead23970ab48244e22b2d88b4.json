{"ast":null,"code":"var _jsxFileName = \"/Users/leilaenglund/my-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport \"./style.css\";\nimport { useForm } from 'react-hook-form';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from './components/NavigationBar';\nconst SPREADSHEET_ID = 'nhlD3E6xsi2lbDQ71HTJ3oQ1Ql5dIkuiK4IoZYjHD'; //from the URL of your blank Google Sheet\n\nconst CLIENT_ID = '2d280542491u-3aofp4eFeftog7q0u5a73ro566h8vi.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\n\nconst API_KEY = 'AIzaSyCz5fYFuCORKGXSGu4IwKq4U_HfcdDtB'; //https://console.developers.google.com/apis/credentials\n\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\nexport default class ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClientLoad = () => {\n      //initialize the Google API\n      gapi.load('client:auth2', this.initClient);\n    };\n\n    this.initClient = () => {\n      //provide the authentication credentials you set up in the Google developer console\n      gapi.client.init({\n        'apiKey': API_KEY,\n        'clientId': CLIENT_ID,\n        'scope': SCOPE,\n        'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4']\n      }).then(() => {\n        gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus); //add a function called `updateSignInStatus` if you want to do something once a user is logged in with Google\n\n        this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      });\n    };\n\n    this.onFormSubmit = this.onFormSubmit.bind(this); //to tie the form's callback to this class\n  }\n\n  componentDidMount() {\n    //called automatically by React\n    this.handleClientLoad();\n  }\n\n  onFormSubmit(submissionValues) {\n    const params = {\n      // The ID of the spreadsheet to update.\n      spreadsheetId: SPREADSHEET_ID,\n      // The A1 notation of a range to search for a logical table of data.Values will be appended after the last row of the table.\n      range: 'Sheet1',\n      //this is the default spreadsheet name, so unless you've changed it, or are submitting to multiple sheets, you can leave this\n      // How the input data should be interpreted.\n      valueInputOption: 'RAW',\n      //RAW = if no conversion or formatting of submitted data is needed. Otherwise USER_ENTERED\n      // How the input data should be inserted.\n      insertDataOption: 'INSERT_ROWS' //Choose OVERWRITE OR INSERT_ROWS\n\n    };\n    const valueRangeBody = {\n      'majorDimension': 'ROWS',\n      //log each entry as a new row (vs column)\n      'values': [submissionValues] //convert the object's values to an array\n\n    };\n    let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\n    request.then(function (response) {\n      // TODO: Insert desired response behaviour on submission\n      console.log(response.result);\n    }, function (reason) {\n      console.error('error: ' + reason.result.error.message);\n    });\n  }\n\n  render() {\n    //TODO: add your form fields below that you want to submit to the sheet. This just has a name field\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavigationBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 8\n      }\n    }))), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 3\n      }\n    }, \"Request product\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 3\n      }\n    }, \"Help us to build a library of products wanted by you\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 5\n      }\n    }, \"Add URL:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"https://www.company.com/product\",\n      name: \"URL\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 3\n      }\n    }, \"Or simply add manually details of the product\"), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }\n    }, \"Brand:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Brand Name\",\n      name: \"brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }\n    }, \"Product:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Product name\",\n      name: \"product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, \"Category:\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"ex. Clenser, shampo, mascara...\",\n      name: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/leilaenglund/my-app/src/App.js"],"names":["React","useForm","BrowserRouter","Router","Route","Switch","NavigationBar","SPREADSHEET_ID","CLIENT_ID","API_KEY","SCOPE","ContactForm","Component","constructor","props","handleClientLoad","gapi","load","initClient","client","init","then","auth2","getAuthInstance","isSignedIn","listen","updateSignInStatus","get","onFormSubmit","bind","componentDidMount","submissionValues","params","spreadsheetId","range","valueInputOption","insertDataOption","valueRangeBody","request","sheets","spreadsheets","values","append","response","console","log","result","reason","error","message","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport \"./style.css\";\nimport { useForm } from 'react-hook-form';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { NavigationBar } from './components/NavigationBar';\n\nconst SPREADSHEET_ID = 'nhlD3E6xsi2lbDQ71HTJ3oQ1Ql5dIkuiK4IoZYjHD'; //from the URL of your blank Google Sheet\nconst CLIENT_ID = '2d280542491u-3aofp4eFeftog7q0u5a73ro566h8vi.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\nconst API_KEY = 'AIzaSyCz5fYFuCORKGXSGu4IwKq4U_HfcdDtB'; //https://console.developers.google.com/apis/credentials\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\n\n\nexport default class ContactForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.onFormSubmit = this.onFormSubmit.bind(this); //to tie the form's callback to this class\n  }\n\n  componentDidMount(){ //called automatically by React\n    this.handleClientLoad(); \n  }\n\n   handleClientLoad =()=> { //initialize the Google API\n    gapi.load('client:auth2', this.initClient);\n  }\n\n   initClient =()=> { //provide the authentication credentials you set up in the Google developer console\n    gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': CLIENT_ID,\n      'scope': SCOPE,\n      'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n    }).then(()=> {\n      gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus); //add a function called `updateSignInStatus` if you want to do something once a user is logged in with Google\n      this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    });\n  }\n\n   onFormSubmit(submissionValues) {\n\n    const params = {\n      // The ID of the spreadsheet to update.\n      spreadsheetId: SPREADSHEET_ID, \n      // The A1 notation of a range to search for a logical table of data.Values will be appended after the last row of the table.\n      range: 'Sheet1', //this is the default spreadsheet name, so unless you've changed it, or are submitting to multiple sheets, you can leave this\n      // How the input data should be interpreted.\n      valueInputOption: 'RAW', //RAW = if no conversion or formatting of submitted data is needed. Otherwise USER_ENTERED\n      // How the input data should be inserted.\n      insertDataOption: 'INSERT_ROWS', //Choose OVERWRITE OR INSERT_ROWS\n    };\n\n        const valueRangeBody = {\n      'majorDimension': 'ROWS', //log each entry as a new row (vs column)\n      'values': [submissionValues] //convert the object's values to an array\n    };\n\n\n let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\n    request.then(function (response) {\n      // TODO: Insert desired response behaviour on submission\n      console.log(response.result);\n    }, function (reason) {\n      console.error('error: ' + reason.result.error.message);\n    });\n  }\n\n  \nrender() {\n    //TODO: add your form fields below that you want to submit to the sheet. This just has a name field\n    return (\n      <Form\n        onSubmit={this.onFormSubmit}\n      >\n\n  <React.Fragment>\n      <Router>\n       <NavigationBar />\n      </Router>\n  </React.Fragment>\n\n  <h1>Request product</h1>\n\n  <p>Help us to build a library of products wanted by you</p>\n\n    <label htmlFor=\"text\">Add URL:</label>\n      <input type=\"text\" placeholder=\"https://www.company.com/product\" name=\"URL\"/>\n\n  <p>Or simply add manually details of the product</p>\n\n    <label htmlFor=\"text\">Brand:</label>\n      <input type=\"text\" placeholder=\"Brand Name\" name=\"brand\"/>\n\n    <label htmlFor=\"text\">Product:</label>\n      <input type=\"text\" placeholder=\"Product name\" name=\"product\"/>\n\n          <label htmlFor=\"text\">Category:</label>\n      <input type=\"text\" placeholder=\"ex. Clenser, shampo, mascara...\" name=\"category\"/>\n      \n      <input type=\"submit\" />\n    </Form>\n  );\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}