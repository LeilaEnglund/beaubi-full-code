{"ast":null,"code":"var _jsxFileName = \"/Users/leilaenglund/my-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nclass ShakingError extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      key: 0\n    };\n  }\n\n  componentWillReceiveProps() {\n    // update key to remount the component to rerun the animation\n    this.setState({\n      key: ++this.state.key\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: this.state.key,\n      className: \"bounce\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 12\n      }\n    }, this.props.text);\n  }\n\n}\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n\n    if (!event.target.checkValidity()) {\n      this.setState({\n        invalid: true,\n        displayErrors: true\n      });\n      return;\n    }\n\n    const form = event.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n      console.log('parser name is', parserName);\n\n      if (parserName) {\n        const parsedValue = inputParsers[parserName](data.get(name));\n        data.set(name, parsedValue);\n      }\n    }\n\n    this.setState({\n      res: stringifyFormData(data),\n      invalid: false,\n      displayErrors: false\n    });\n  }\n\n  render() {\n    const {\n      res,\n      invalid,\n      displayErrors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      noValidate: true,\n      className: displayErrors ? 'displayErrors' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Brand:\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"brand\",\n      name: \"brand\",\n      type: \"text\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"product\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, \"Product:\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"product\",\n      name: \"product\",\n      type: \"text\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    }, \"Category:\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"category\",\n      name: \"category\",\n      type: \"text\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Comfirm\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"res-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, invalid && /*#__PURE__*/React.createElement(ShakingError, {\n      text: \"Form is not valid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), !invalid && res && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }\n    }, \"Transformed data to be sent:\"), /*#__PURE__*/React.createElement(\"pre\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }, \"FormData \", res))));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(MyForm, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 3\n  }\n}), document.getElementById('app'));\n\nfunction stringifyFormData(fd) {\n  const data = {};\n\n  for (let key of fd.keys()) {\n    data[key] = fd.get(key);\n  }\n\n  return JSON.stringify(data, null, 2);\n}","map":{"version":3,"sources":["/Users/leilaenglund/my-app/src/App.js"],"names":["React","ShakingError","Component","constructor","state","key","componentWillReceiveProps","setState","render","props","text","MyForm","handleSubmit","bind","event","preventDefault","target","checkValidity","invalid","displayErrors","form","data","FormData","name","keys","input","elements","parserName","dataset","parse","console","log","parsedValue","inputParsers","get","set","res","stringifyFormData","ReactDOM","document","getElementById","fd","JSON","stringify"],"mappings":"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","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nclass ShakingError extends React.Component {\n  constructor() { super(); this.state = { key: 0 }; }\n\n  componentWillReceiveProps() {\n    // update key to remount the component to rerun the animation\n    this.setState({ key: ++this.state.key });\n  }\n  \n  render() {\n    return <div key={this.state.key} className=\"bounce\">{this.props.text}</div>;\n  }\n}\n\nclass MyForm extends React.Component {\n  constructor() {\n    super();\n    this.state = {};\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (!event.target.checkValidity()) {\n      this.setState({\n        invalid: true,\n        displayErrors: true,\n      });\n      return;\n    }\n    const form = event.target;\n    const data = new FormData(form);\n\n    for (let name of data.keys()) {\n      const input = form.elements[name];\n      const parserName = input.dataset.parse;\n      console.log('parser name is', parserName);\n      if (parserName) {\n        const parsedValue = inputParsers[parserName](data.get(name))\n        data.set(name, parsedValue);\n      }\n    }\n    \n    this.setState({\n      res: stringifyFormData(data),\n      invalid: false,\n      displayErrors: false,\n    });\n\n  }\n\n  render() {\n    const { res, invalid, displayErrors } = this.state;\n    return (\n      <div>\n        <form\n          onSubmit={this.handleSubmit}\n          noValidate\n          className={displayErrors ? 'displayErrors' : ''}\n         >\n          <label htmlFor=\"brand\">Brand:</label>\n          <input id=\"brand\" name=\"brand\" type=\"text\" required/>\n\n          <label htmlFor=\"product\">Product:</label>\n          <input id=\"product\" name=\"product\" type=\"text\" required/>\n          \n           <label htmlFor=\"category\">Category:</label>\n          <input id=\"category\" name=\"category\" type=\"text\" required/>\n\n        \n\n          <button>Comfirm</button>\n        </form>\n        \n        \n        \n        <div className=\"res-block\">\n          {invalid && (\n            <ShakingError text=\"Form is not valid\" />\n          )}\n          {!invalid && res && (\n            <div>\n              <h3>Transformed data to be sent:</h3>\n              <pre>FormData {res}</pre>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MyForm />,\n  document.getElementById('app')\n);\n\n\nfunction stringifyFormData(fd) {\n  const data = {};\n  for (let key of fd.keys()) {\n    data[key] = fd.get(key);\n  }\n  return JSON.stringify(data, null, 2);\n}"]},"metadata":{},"sourceType":"module"}