{"ast":null,"code":"var _jsxFileName = \"/Users/leilaenglund/my-app/src/App.js\";\nimport React from 'react'; //import logo from './logo.svg';\n//import './App.css';\n\nimport { Form, Text } from 'informed'; //https://joepuzzo.github.io/informed/\n\nconst SPREADSHEET_ID = '11J9fP9E1nDBZlWyyoun-PyZmAmHUTxnUZoiy0inukJY'; //from the URL of your blank Google Sheet\n\nconst CLIENT_ID = '1013529612125-6dp96tt114e1lg064oj2576uk9b33ud7.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\n\nconst API_KEY = 'AIzaSyAJMUhLJQPPZK8AsjSCtKVr8s4BcZNWtDA'; //https://console.developers.google.com/apis/credentials\n\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\nexport default class ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClientLoad = () => {\n      //initialize the Google API\n      gapi.load('client:auth2', this.initClient);\n    };\n\n    this.initClient = () => {\n      //provide the authentication credentials you set up in the Google developer console\n      gapi.client.init({\n        'apiKey': API_KEY,\n        'clientId': CLIENT_ID,\n        'scope': SCOPE,\n        'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4']\n      }).then(() => {\n        gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus); //add a function called `updateSignInStatus` if you want to do something once a user is logged in with Google\n\n        this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n      });\n    };\n\n    this.onFormSubmit = this.onFormSubmit.bind(this); //to tie the form's callback to this class\n  }\n\n  componentDidMount() {\n    //called automatically by React\n    this.handleClientLoad();\n  }\n\n  onFormSubmit(submissionValues) {\n    const params = {\n      // The ID of the spreadsheet to update.\n      spreadsheetId: SPREADSHEET_ID,\n      // The A1 notation of a range to search for a logical table of data.Values will be appended after the last row of the table.\n      range: 'Sheet1',\n      //this is the default spreadsheet name, so unless you've changed it, or are submitting to multiple sheets, you can leave this\n      // How the input data should be interpreted.\n      valueInputOption: 'RAW',\n      //RAW = if no conversion or formatting of submitted data is needed. Otherwise USER_ENTERED\n      // How the input data should be inserted.\n      insertDataOption: 'INSERT_ROWS' //Choose OVERWRITE OR INSERT_ROWS\n\n    };\n    const valueRangeBody = {\n      'majorDimension': 'ROWS',\n      //log each entry as a new row (vs column)\n      'values': [submissionValues] //convert the object's values to an array\n\n    };\n    let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\n    request.then(function (response) {\n      // TODO: Insert desired response behaviour on submission\n      console.log(response.result);\n    }, function (reason) {\n      console.error('error: ' + reason.result.error.message);\n    });\n  }\n\n  render() {\n    //TODO: add your form fields below that you want to submit to the sheet. This just has a name field\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"First name:\", /*#__PURE__*/React.createElement(Text, {\n      field: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/leilaenglund/my-app/src/App.js"],"names":["React","Form","Text","SPREADSHEET_ID","CLIENT_ID","API_KEY","SCOPE","ContactForm","Component","constructor","props","handleClientLoad","gapi","load","initClient","client","init","then","auth2","getAuthInstance","isSignedIn","listen","updateSignInStatus","get","onFormSubmit","bind","componentDidMount","submissionValues","params","spreadsheetId","range","valueInputOption","insertDataOption","valueRangeBody","request","sheets","spreadsheets","values","append","response","console","log","result","reason","error","message","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AAEA,SAASC,IAAT,EAAeC,IAAf,QAA2B,UAA3B,C,CAAuC;;AAGvC,MAAMC,cAAc,GAAG,8CAAvB,C,CAAuE;;AACvE,MAAMC,SAAS,GAAG,2EAAlB,C,CAA+F;;AAC/F,MAAMC,OAAO,GAAG,yCAAhB,C,CAA2D;;AAC3D,MAAMC,KAAK,GAAG,8CAAd;AAEA,eAAe,MAAMC,WAAN,SAA0BP,KAAK,CAACQ,SAAhC,CAA0C;AAEvDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,gBATmB,GASD,MAAK;AAAE;AACvBC,MAAAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0B,KAAKC,UAA/B;AACD,KAXkB;;AAAA,SAanBA,UAbmB,GAaP,MAAK;AAAE;AACjBF,MAAAA,IAAI,CAACG,MAAL,CAAYC,IAAZ,CAAiB;AACf,kBAAUX,OADK;AAEf,oBAAYD,SAFG;AAGf,iBAASE,KAHM;AAIf,yBAAiB,CAAC,0DAAD;AAJF,OAAjB,EAKGW,IALH,CAKQ,MAAK;AACXL,QAAAA,IAAI,CAACM,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCC,MAAxC,CAA+C,KAAKC,kBAApD,EADW,CAC8D;;AACzE,aAAKA,kBAAL,CAAwBV,IAAI,CAACM,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCG,GAAxC,EAAxB;AACD,OARD;AASD,KAvBkB;;AAEjB,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB,CAFiB,CAEiC;AACnD;;AAEDC,EAAAA,iBAAiB,GAAE;AAAE;AACnB,SAAKf,gBAAL;AACD;;AAkBDa,EAAAA,YAAY,CAACG,gBAAD,EAAmB;AAE7B,UAAMC,MAAM,GAAG;AACb;AACAC,MAAAA,aAAa,EAAE1B,cAFF;AAGb;AACA2B,MAAAA,KAAK,EAAE,QAJM;AAII;AACjB;AACAC,MAAAA,gBAAgB,EAAE,KANL;AAMY;AACzB;AACAC,MAAAA,gBAAgB,EAAE,aARL,CAQoB;;AARpB,KAAf;AAWA,UAAMC,cAAc,GAAG;AACrB,wBAAkB,MADG;AACK;AAC1B,gBAAU,CAACN,gBAAD,CAFW,CAEQ;;AAFR,KAAvB;AAKA,QAAIO,OAAO,GAAGtB,IAAI,CAACG,MAAL,CAAYoB,MAAZ,CAAmBC,YAAnB,CAAgCC,MAAhC,CAAuCC,MAAvC,CAA8CV,MAA9C,EAAsDK,cAAtD,CAAd;AACAC,IAAAA,OAAO,CAACjB,IAAR,CAAa,UAAUsB,QAAV,EAAoB;AAC/B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,MAArB;AACD,KAHD,EAGG,UAAUC,MAAV,EAAkB;AACnBH,MAAAA,OAAO,CAACI,KAAR,CAAc,YAAYD,MAAM,CAACD,MAAP,CAAcE,KAAd,CAAoBC,OAA9C;AACD,KALD;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,wBACE,oBAAC,IAAD;AACE,MAAA,QAAQ,EAAE,KAAKtB,YADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEE,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAHF,eAOE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF;AAaD;;AArEsD","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\n\nimport { Form, Text } from 'informed'; //https://joepuzzo.github.io/informed/\n\n\nconst SPREADSHEET_ID = '11J9fP9E1nDBZlWyyoun-PyZmAmHUTxnUZoiy0inukJY'; //from the URL of your blank Google Sheet\nconst CLIENT_ID = '1013529612125-6dp96tt114e1lg064oj2576uk9b33ud7.apps.googleusercontent.com'; //from https://console.developers.google.com/apis/credentials\nconst API_KEY = 'AIzaSyAJMUhLJQPPZK8AsjSCtKVr8s4BcZNWtDA'; //https://console.developers.google.com/apis/credentials\nconst SCOPE = 'https://www.googleapis.com/auth/spreadsheets';\n\nexport default class ContactForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.onFormSubmit = this.onFormSubmit.bind(this); //to tie the form's callback to this class\n  }\n\n  componentDidMount(){ //called automatically by React\n    this.handleClientLoad(); \n  }\n\n  handleClientLoad =()=> { //initialize the Google API\n    gapi.load('client:auth2', this.initClient);\n  }\n\n  initClient =()=> { //provide the authentication credentials you set up in the Google developer console\n    gapi.client.init({\n      'apiKey': API_KEY,\n      'clientId': CLIENT_ID,\n      'scope': SCOPE,\n      'discoveryDocs': ['https://sheets.googleapis.com/$discovery/rest?version=v4'],\n    }).then(()=> {\n      gapi.auth2.getAuthInstance().isSignedIn.listen(this.updateSignInStatus); //add a function called `updateSignInStatus` if you want to do something once a user is logged in with Google\n      this.updateSignInStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n    });\n  }\n\n  onFormSubmit(submissionValues) {\n\n    const params = {\n      // The ID of the spreadsheet to update.\n      spreadsheetId: SPREADSHEET_ID, \n      // The A1 notation of a range to search for a logical table of data.Values will be appended after the last row of the table.\n      range: 'Sheet1', //this is the default spreadsheet name, so unless you've changed it, or are submitting to multiple sheets, you can leave this\n      // How the input data should be interpreted.\n      valueInputOption: 'RAW', //RAW = if no conversion or formatting of submitted data is needed. Otherwise USER_ENTERED\n      // How the input data should be inserted.\n      insertDataOption: 'INSERT_ROWS', //Choose OVERWRITE OR INSERT_ROWS\n    };\n\n    const valueRangeBody = {\n      'majorDimension': 'ROWS', //log each entry as a new row (vs column)\n      'values': [submissionValues] //convert the object's values to an array\n    };\n\n    let request = gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody);\n    request.then(function (response) {\n      // TODO: Insert desired response behaviour on submission\n      console.log(response.result);\n    }, function (reason) {\n      console.error('error: ' + reason.result.error.message);\n    });\n  }\n\n  render() {\n    //TODO: add your form fields below that you want to submit to the sheet. This just has a name field\n    return (\n      <Form\n        onSubmit={this.onFormSubmit}\n      >\n        <label>\n          First name:\n          <Text field='name' />\n        </label>\n        <button type='submit'>\n          Submit\n        </button>\n      </Form>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}